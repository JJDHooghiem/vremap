""" Tool for vertical mass conserved remapping between different hybrid pressure sigma coefficients. Copyright (C) JJD Hooghiem.

This program is free software: you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software Foundation,
version 3. This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this
program. If not, see <http://www.gnu.org/licenses/>.

This file contains hardcoded level definitions of several hybrid sigma vertical coordinates in use. In general, the first coefficient belongs to the top of the atmosphere. The coefficients pressented here belong to the half level interface (staggered). They are bundled in a dictionary for imports.

The level defenitions where taken from https://confluence.ecmwf.int/display/UDOC/Model+level+definitions
"""

import numpy as np


L25_a=np.array([0.00000000e+00,1.07415741e+02,3.16420746e+02,7.29744141e+02,
1.72944898e+03,3.91149048e+03,6.15607422e+03,8.60852539e+03,
1.22115479e+04,1.55082568e+04,1.79016211e+04,1.98593906e+04,
2.04257188e+04,2.00870859e+04,1.89174609e+04,1.68886875e+04,
1.48984531e+04,1.19013398e+04,8.88045312e+03,6.16853125e+03,
3.95596094e+03,2.29424219e+03,9.26507813e+02,2.02484375e+02,
3.75781300e+00,0.00000000e+00])

L25_b=np.array([0.00000e+00,0.00000e+00,0.00000e+00,0.00000e+00,0.00000e+00,0.00000e+00,
0.00000e+00,5.90000e-05,1.99200e-03,1.18060e-02,3.21760e-02,7.79580e-02,
1.53125e-01,2.03491e-01,2.85354e-01,3.84363e-01,4.66003e-01,5.76692e-01,
6.80643e-01,7.70798e-01,8.43881e-01,8.99900e-01,9.49064e-01,9.80072e-01,
9.95003e-01,1.00000e+00])

L137_a = np.array([ 
       0.000000,      2.000365,      3.102241,      4.666084,      6.827977,      
       9.746966,      13.605424,     18.608931,     24.985718,     32.985710,     
       42.879242,     54.955463,     69.520576,     86.895882,     107.415741,    
       131.425507,    159.279404,    191.338562,    227.968948,    269.539581,    
       316.420746,    368.982361,    427.592499,    492.616028,    564.413452,    
       643.339905,    729.744141,    823.967834,    926.344910,    1037.201172,   
       1156.853638,   1285.610352,   1423.770142,   1571.622925,   1729.448975,   
       1897.519287,   2076.095947,   2265.431641,   2465.770508,   2677.348145,   
       2900.391357,   3135.119385,   3381.743652,   3640.468262,   3911.490479,   
       4194.930664,   4490.817383,   4799.149414,   5119.895020,   5452.990723,   
       5798.344727,   6156.074219,   6526.946777,   6911.870605,   7311.869141,   
       7727.412109,   8159.354004,   8608.525391,   9076.400391,   9562.682617,   
       10065.978516,  10584.631836,  11116.662109,  11660.067383,  12211.547852,  
       12766.873047,  13324.668945,  13881.331055,  14432.139648,  14975.615234,  
       15508.256836,  16026.115234,  16527.322266,  17008.789063,  17467.613281,  
       17901.621094,  18308.433594,  18685.718750,  19031.289063,  19343.511719,  
       19620.042969,  19859.390625,  20059.931641,  20219.664063,  20337.863281,  
       20412.308594,  20442.078125,  20425.718750,  20361.816406,  20249.511719,  
       20087.085938,  19874.025391,  19608.572266,  19290.226563,  18917.460938,  
       18489.707031,  18006.925781,  17471.839844,  16888.687500,  16262.046875,  
       15596.695313,  14898.453125,  14173.324219,  13427.769531,  12668.257813,  
       11901.339844,  11133.304688,  10370.175781,  9617.515625,   8880.453125,   
       8163.375000,   7470.343750,   6804.421875,   6168.531250,   5564.382813,   
       4993.796875,   4457.375000,   3955.960938,   3489.234375,   3057.265625,   
       2659.140625,   2294.242188,   1961.500000,   1659.476563,   1387.546875,   
       1143.250000,   926.507813,    734.992188,    568.062500,    424.414063,    
       302.476563,    202.484375,    122.101563,    62.781250,     22.835938,     
       3.757813,      0.000000,      0.000000 ])
       
L137_b = np.array([ 
       0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 
       0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 
       0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 
       0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 
       0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 
       0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 
       0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 
       0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 
       0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 
       0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 
       0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 
       0.000007, 0.000024, 0.000059, 0.000112, 0.000199, 
       0.000340, 0.000562, 0.000890, 0.001353, 0.001992, 
       0.002857, 0.003971, 0.005378, 0.007133, 0.009261, 
       0.011806, 0.014816, 0.018318, 0.022355, 0.026964, 
       0.032176, 0.038026, 0.044548, 0.051773, 0.059728, 
       0.068448, 0.077958, 0.088286, 0.099462, 0.111505, 
       0.124448, 0.138313, 0.153125, 0.168910, 0.185689, 
       0.203491, 0.222333, 0.242244, 0.263242, 0.285354, 
       0.308598, 0.332939, 0.358254, 0.384363, 0.411125, 
       0.438391, 0.466003, 0.493800, 0.521619, 0.549301, 
       0.576692, 0.603648, 0.630036, 0.655736, 0.680643, 
       0.704669, 0.727739, 0.749797, 0.770798, 0.790717, 
       0.809536, 0.827256, 0.843881, 0.859432, 0.873929, 
       0.887408, 0.899900, 0.911448, 0.922096, 0.931881, 
       0.940860, 0.949064, 0.956550, 0.963352, 0.969513, 
       0.975078, 0.980072, 0.984542, 0.988500, 0.991984, 
       0.995003, 0.997630, 1.000000 ])
L91_a = np.array([ 0, 2.00004, 3.980832, 7.387186, 12.90832, 21.41361, 33.95286, 51.7466, 76.16766, 
 108.7156, 150.986, 204.6375, 271.3565, 352.8245, 450.6858, 566.5192, 701.8134, 
 857.9458, 1036.167, 1237.585, 1463.164, 1713.71, 1989.874, 2292.156, 2620.898, 
 2976.302, 3358.426, 3767.196, 4202.417, 4663.776, 5150.86, 5663.156, 6199.839, 
 6759.727, 7341.47, 7942.926, 8564.624, 9208.306, 9873.561, 10558.88, 11262.48, 
 11982.66, 12713.9, 13453.23, 14192.01, 14922.69, 15638.05, 16329.56, 16990.62, 
 17613.28, 18191.03, 18716.97, 19184.54, 19587.51, 19919.8, 20175.39, 20348.92, 
 20434.16, 20426.22, 20319.01, 20107.03, 19785.36, 19348.78, 18798.82, 18141.3, 
 17385.6, 16544.59, 15633.57, 14665.65, 13653.22, 12608.38, 11543.17, 10471.31, 
 9405.223, 8356.253, 7335.165, 6353.921, 5422.803, 4550.216, 3743.464, 3010.147, 
 2356.203, 1784.855, 1297.656, 895.1935, 576.3141, 336.7724, 162.0434, 54.20834, 
 6.575628, 0.00316, 0 ])

L91_b=np.array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.724e-07,
1.39116e-05,5.46672e-05,0.0001313641,0.0002788848,0.0005483841,0.001000134,
0.001701075,0.002764719,0.004267049,0.006322167,0.00903499,0.01250826,
0.01685958,0.02218864,0.02861035,0.03622691,0.04514613,0.05547423,0.06731619,
0.0807773,0.09596406,0.112979,0.1319348,0.1529335,0.1760911,0.2015201,
0.2293149,0.2595545,0.2919934,0.3263294,0.3622026,0.3992048,0.4369063,
0.4750164,0.5132797,0.5514585,0.5893171,0.6265589,0.6629336,0.6982236,
0.7322238,0.7646795,0.7953848,0.8241854,0.8509504,0.8755184,0.8977672,
0.9176509,0.9351571,0.9502738,0.9630071,0.973466,0.9822381,0.989153,0.9942042,
0.9976301,1])

L34_a=np.array([    0.      ,  107.415741,  316.420746,  729.744141, 1729.448975,
  3911.490479, 6156.074219, 7311.869141, 8608.525391,10584.631836 ,
 12211.547852,13881.331055,15508.256836,17008.789063,17901.621094 ,
 19031.289063,19859.390625,20219.664063,20412.308594,20361.816406 ,
 20087.085938,19608.572266,18917.460938,18006.925781,16888.6875   ,
 14173.324219,11901.339844, 8880.453125, 6168.53125 , 3955.960938 ,
  1961.5     ,  926.507813,  202.484375,   22.835938,    0.      ])

L34_b=np.array([0.00000e+00,0.00000e+00,0.00000e+00,0.00000e+00, 0.00000e+00,0.00000e+00,
 0.00000e+00,0.00000e+00,5.90000e-05,5.62000e-04, 1.99200e-03,5.37800e-03 ,
 1.18060e-02,2.23550e-02,3.21760e-02,5.17730e-02, 7.79580e-02,9.94620e-02 ,
 1.24448e-01,1.68910e-01,2.03491e-01,2.42244e-01, 2.85354e-01,3.32939e-01 ,
 3.84363e-01,4.93800e-01,5.76692e-01,6.80643e-01, 7.70798e-01,8.43881e-01 ,
 9.11448e-01,9.49064e-01,9.80072e-01,9.91984e-01, 1.00000e+00])

hybrid_sigma_a = {'L91': L91_a,'L25': L25_a, 'L137': L137_a, 'L34' : L34_a } 
hybrid_sigma_b = {'L91': L91_b,'L25': L25_b, 'L137': L137_b, 'L34' : L34_b }  

def detect_levels(massfield):
    "Detect the vertical levels of the input field, assuming that it is the first dimension"
    levs=np.shape(massfield)[0]
    levs= 'L%s' % levs
    print('Detected input levels system: %s' % levs ) 
    return levs 

def out_init(levs,datain):
    ''' Initialize output dataset based on the input data set dimensions and keys, replacing        only the vertical dimension with the target levels
    levs : target level system
    datain
    '''
    nlevs = len(hybrid_sigma_a[levs]) 
    data_out={}
    for key in datain.keys():
        if key!='sp': 
            dims=np.shape(datain[key])
            data_out[key]=np.zeros((nlevs,dims[1],dims[2],),'float64','F')
        else:
            # copy surface pressure
            data_out[key]=datain[key]
    return data_out
